// <auto-generated />
using System;
using GolfLeaderboard.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GolfLeaderboard.API.Migrations
{
    [DbContext(typeof(GolfLeaderboardDbContext))]
    [Migration("20230719223456_Golfer Home Course Migration")]
    partial class GolferHomeCourseMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GolfLeaderboard.API.Models.DomainModels.GolfCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("CourseRating")
                        .HasColumnType("real");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.Property<int>("SlopeRating")
                        .HasColumnType("int");

                    b.Property<int>("Yardage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GolfCourses");
                });

            modelBuilder.Entity("GolfLeaderboard.API.Models.DomainModels.Golfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("HandicapIndex")
                        .HasColumnType("real");

                    b.Property<Guid>("HomeCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeaderboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HomeCourseId");

                    b.HasIndex("LeaderboardId");

                    b.ToTable("Golfers");
                });

            modelBuilder.Entity("GolfLeaderboard.API.Models.DomainModels.Leaderboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GolfCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GolfCourseId");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("GolfLeaderboard.API.Models.DomainModels.Score", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GolferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GolferId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("GolfLeaderboard.API.Models.DomainModels.Golfer", b =>
                {
                    b.HasOne("GolfLeaderboard.API.Models.DomainModels.GolfCourse", "HomeCourse")
                        .WithMany()
                        .HasForeignKey("HomeCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfLeaderboard.API.Models.DomainModels.Leaderboard", null)
                        .WithMany("Golfers")
                        .HasForeignKey("LeaderboardId");

                    b.Navigation("HomeCourse");
                });

            modelBuilder.Entity("GolfLeaderboard.API.Models.DomainModels.Leaderboard", b =>
                {
                    b.HasOne("GolfLeaderboard.API.Models.DomainModels.GolfCourse", "GolfCourse")
                        .WithMany()
                        .HasForeignKey("GolfCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GolfCourse");
                });

            modelBuilder.Entity("GolfLeaderboard.API.Models.DomainModels.Score", b =>
                {
                    b.HasOne("GolfLeaderboard.API.Models.DomainModels.Golfer", null)
                        .WithMany("Scores")
                        .HasForeignKey("GolferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GolfLeaderboard.API.Models.DomainModels.Golfer", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("GolfLeaderboard.API.Models.DomainModels.Leaderboard", b =>
                {
                    b.Navigation("Golfers");
                });
#pragma warning restore 612, 618
        }
    }
}
